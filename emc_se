#!/bin/sh

### BEGIN INIT INFO
# Provides:        emc_se
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    1
# Short-Description: Start SE container
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin

. /lib/lsb/init-functions

IMAGE=se8200
PIDFILE=/var/run/emc_se.pid

test -x /usr/bin/docker || exit 5

LIST=`/usr/bin/docker images $IMAGE | grep -v '^REPO'`
test -n "$LIST" || exit 5

if [ -r /etc/default/emc_se ]; then
	. /etc/default/emc_se
fi

do_start () {
	if [ ! -d /usr/emc ]; then
		mkdir /usr/emc
	fi
	if [ -f $PIDFILE ]; then 
		log_failure_msg "$IMAGE is already running"
		return 1
	fi
	PID=`/usr/bin/docker run -d -p 50022:22 -p 5989:5989 --privileged -v /usr/emc/:/usr/emc se8200`
	echo $PID > $PIDFILE
	return 0
}

do_stop () {
	if [ ! -f $PIDFILE ]; then
		log_failure_msg "$IMAGE is not running"
		return 1
	fi
	PID=`cat $PIDFILE`
	/usr/bin/docker kill $PID > /dev/null
	/usr/bin/docker rm $PID > /dev/null
	rm -f $PIDFILE
	return 0
}

do_status () {
	if [ ! -f $PIDFILE ]; then
		log_daemon_msg "$IMAGE is not running"
		return 1
	fi
	PID=`cat $PIDFILE`
	log_daemon_msg "$IMAGE is running ($PID)"
	return 0
}

case $1 in
	start)
		log_daemon_msg "Starting SE Container" $IMAGE
  		do_start
		log_end_msg $?
  		;;
	stop)
		log_daemon_msg "Stopping SE Container" $IMAGE
  		do_stop
		log_end_msg $?
  		;;
	restart|force-reload)
		do_stop && sleep 2 && do_start
  		;;
	try-restart)
		if do_status; then
			do_stop && sleep 2 && do_start
		else
			exit 0
		fi
		;;
	reload)
		exit 3
		;;
	status)
		do_status
		;;
	*)
		echo "Usage: $0 {start|stop|restart|try-restart|force-reload|status}"
		exit 2
		;;
esac
